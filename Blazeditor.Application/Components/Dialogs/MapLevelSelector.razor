@using Blazeditor.Application.Models

<div class="map-level-selector mb-3">
    <label class="form-label">Map Levels</label>
    <div class="btn-group-vertical w-100" role="group" aria-label="Map Levels">
        @foreach (var level in Levels)
        {
            <div class="d-flex align-items-center mb-1 justify-content-between">
                <input type="radio" class="form-check-input me-2" name="levelRadio" value="@level" checked="@(level.Key == ActiveLevel)" @onchange="() => OnLevelSelected.InvokeAsync(level.Key)" />
                @if (editingLevel == level.Key)
                {
                    <input class="form-control form-control-sm me-2" style="width: 120px;" @bind="editName" @onkeydown="(e) => OnEditKeyDown(e, level.Key)" />
                    <div>
                        <input class="form-control form-control-sm me-2" style="width: 180px;" @bind="editDescription" @onkeydown="(e) => OnEditKeyDown(e, level.Key)" />
                        <button class="btn btn-sm btn-success me-1" @onclick="() => SaveEdit(level.Key)"><i class="bi bi-check"></i></button>
                        <button class="btn btn-sm btn-secondary me-1" @onclick="CancelEdit"><i class="bi bi-x"></i></button>
                    </div>
                }
                else
                {
                    <div>
                        <span class="me-2">Level @level.Value.Name</span>
                        <span class="me-2 text-muted">@level.Value.Description</span>
                    </div>
                    <div>
                        <button class="btn btn-sm btn-outline-secondary me-1" title="Edit Level" @onclick="() => StartEdit(level.Key)"><i class="bi bi-pencil"></i></button>
                        <button class="btn btn-sm btn-outline-danger ms-auto" title="Remove Level" @onclick="() => OnRemoveLevel.InvokeAsync(level.Key)"><i class="bi bi-trash"></i></button>
                    </div>
                }

            </div>
        }
    </div>
    <button class="btn btn-sm btn-outline-primary mt-2 w-100" @onclick="OnAddLevelClicked"><i class="bi bi-plus"></i> Add Level</button>
</div>

@code {
    [Parameter] public Dictionary<int, TileMap> Levels { get; set; } = new();
    [Parameter] public int ActiveLevel { get; set; }
    [Parameter] public EventCallback<int> OnLevelSelected { get; set; }
    [Parameter] public EventCallback<int> OnRemoveLevel { get; set; }
    [Parameter] public EventCallback OnAddLevel { get; set; }

    private int? editingLevel = null;
    private string editName = string.Empty;
    private string editDescription = string.Empty;

    private void OnAddLevelClicked()
    {
        OnAddLevel.InvokeAsync();
    }

    private void StartEdit(int levelKey)
    {
        editingLevel = levelKey;
        if (Levels.TryGetValue(levelKey, out var map))
        {
            editName = map.Name;
            editDescription = map.Description ?? string.Empty;
        }
    }
    private void CancelEdit()
    {
        editingLevel = null;
        editName = string.Empty;
        editDescription = string.Empty;
    }
    private void SaveEdit(int levelKey)
    {
        if (Levels.TryGetValue(levelKey, out var map))
        {
            map.Name = editName;
            map.Description = editDescription;
        }
        CancelEdit();
    }
    private void OnEditKeyDown(KeyboardEventArgs e, int levelKey)
    {
        if (e.Key == "Enter")
        {
            SaveEdit(levelKey);
        }
        else if (e.Key == "Escape")
        {
            CancelEdit();
        }
    }
}
