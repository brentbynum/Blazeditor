@using System.IO
@using System.Linq
@using Blazeditor.Application.Services
@using Blazeditor.Application.Models
@using Blazeditor.Application.Components.Dialogs
@using SixLabors.ImageSharp
@inject DefinitionManager Definition

<style>
    .import-tilepalette-blur {
        filter: blur(2px) grayscale(0.5);
        pointer-events: none;
        user-select: none;
    }
</style>

@code {
    public List<string> Filenames = new List<string>();
    public string? SelectedFilename { get; set; }
    private string ModalClass => IsVisible ? "show" : "hide";

    [Parameter] public EventCallback<(string, int, int)> OnConfirm { get; set; }
    [Parameter] public int CellSize { get; set; } = 64;

    private bool IsVisible { get; set; }

    protected override void OnInitialized()
    {
        // List all image files in wwwroot/tilesets (png, jpg, jpeg)
        var tilesetDir = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "tilesets");
        if (Directory.Exists(tilesetDir))
        {
            Filenames = Directory.GetFiles(tilesetDir)
                .Where(f => f.EndsWith(".png", StringComparison.OrdinalIgnoreCase) || f.EndsWith(".jpg", StringComparison.OrdinalIgnoreCase) || f.EndsWith(".jpeg", StringComparison.OrdinalIgnoreCase))
                .Select(f => Path.GetFileName(f)).ToList();
        }
    }
    public void Show()
    {
        IsVisible = true;
        StateHasChanged();
    }

    private void Confirm()
    {
        int cellHeight = 64, cellWidth = 64;
        if (SelectedFilename != null && !HasJsonForImage(SelectedFilename))
        {
            (cellWidth, cellHeight) = CalculateCellSizeFromImage(SelectedFilename);
        }
        else if (SelectedFilename != null)
        {
            // Use JSON for slicing
            (cellWidth, cellHeight) = GetCellSizeFromJson(SelectedFilename);

        }
        OnConfirm.InvokeAsync((SelectedFilename ?? "", cellWidth, cellHeight));
        Close();
    }



    private void Close()
    {
        IsVisible = false;
        StateHasChanged();
    }
    private void SelectFile(string filename)
    {
        SelectedFilename = filename;
    }

    private string GetImageUrl(string filename)
    {
        return $"tilesets/{filename}";
    }

    private (int, int) CalculateCellSizeFromImage(string filename)
    {
        var imagePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "tilesets", filename);
        if (File.Exists(imagePath))
        {
            var image = Image.Load(imagePath);
            if (image.Width % 64 != 0 || image.Height % 64 != 0)
            {
                // If not divisible by 64, return the actual size
                return (1, 1);
            }
            return (image.Width/CellSize, image.Height/CellSize);
        }
        return (64, 64); // Default cell size if image not found
    }

    private bool HasJsonForImage(string filename)
    {
        var baseName = Path.GetFileNameWithoutExtension(filename);
        var jsonPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "tilesets", baseName + ".json");
        return File.Exists(jsonPath);
    }

    private (int, int) GetCellSizeFromJson(string filename)
    {
        var baseName = Path.GetFileNameWithoutExtension(filename);
        var jsonPath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "tilesets", baseName + ".json");
        if (File.Exists(jsonPath))
        {
            var json = File.ReadAllText(jsonPath);
            var doc = System.Text.Json.JsonDocument.Parse(json);
            var root = doc.RootElement;
            int cellWidth = root.TryGetProperty("cellWidth", out var w) ? w.GetInt32() : 64;
            int cellHeight = root.TryGetProperty("cellHeight", out var h) ? h.GetInt32() : 64;
            return (cellWidth, cellHeight);
        }
        return (64, 64);
    }
}

<div class="modal @ModalClass" tabindex="-1" style="z-index: 1050;">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <h5 class="modal-header">Select an image file to extract into tiles.</h5>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-5 border-end">
                        <div class="list-group tile-list">
                            @foreach (var filename in Filenames)
                            {
                                <button type="button"
                                        class="list-group-item list-group-item-action d-flex align-items-center tile-option @(SelectedFilename == filename ? "active" : null)"
                                        @onclick="() => { if (filename != null) SelectFile(filename); }">
                                    <span class="file-icon me-2"><i class="bi bi-image"></i></span>
                                    <span class="file-name flex-grow-1">@filename</span>
                                    @if (SelectedFilename == filename)
                                    {
                                        <span class="ms-auto text-primary"><i class="bi bi-check-circle-fill"></i></span>
                                    }
                                </button>
                            }
                        </div>
                    </div>
                    <div class="col-md-7 d-flex flex-column align-items-center justify-content-center preview-pane">
                        @if (!string.IsNullOrEmpty(SelectedFilename))
                        {
                            <img src="@GetImageUrl(SelectedFilename)" alt="Preview" class="img-fluid rounded shadow-sm mb-3 preview-image" />
                            <div class="text-muted small">@SelectedFilename</div>
                        }
                        else
                        {
                            <div class="text-muted">Select a file to preview</div>
                        }
                    </div>
                </div>
                <div class="mt-4 d-flex justify-content-end">
                    <button type="button" class="btn btn-primary me-2" @onclick="Confirm" disabled="@(string.IsNullOrEmpty(SelectedFilename))">Confirm</button>
                    <button type="button" class="btn btn-secondary" @onclick="Close">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>





