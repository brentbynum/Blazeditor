@page "/area/{areaId:int}"

@using Blazeditor.Application.Components.Dialogs
@using Blazeditor.Application.Services
@inject DefinitionManager Definition

<h1>@Definition.SelectedArea?.Name</h1>
<ImportTilePalette @ref="popupRef" OnConfirm="HandleInput" />
<button @onclick="ShowImportTilePalette">Open Import Tile Palette</button>

<div class="container">
    <button @onclick='() => Console.WriteLine("Test button clicked")'>Test Button</button>
    <div class="row">
        <div class="col-4 border rounded p-2 canvas-container">
            <h3>Tile Palette</h3>
            @if (Definition.SelectedArea != null) {
                @foreach (var tile in Definition.SelectedArea.TilePalette)
                {
                    <div class="tile-item">
                        <span>@tile.Type</span>
                    </div>
                }
            }
        </div>
        <div class="col-8">
            <h1>Area Editor</h1>
            <p>This is the area editor page.</p>
            <p>Use the button above to import a tile palette.</p>
            <p>More features will be added soon!</p>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int areaId { get; set; }
    private ImportTilePalette? popupRef;

    protected override void OnParametersSet()
    {
        Definition.SelectedArea = Definition.GetAreas().FirstOrDefault(a => a.Id == areaId);
    }

    private void ShowImportTilePalette()
    {
        Console.WriteLine($"[DEBUG] ShowImportTilePalette called. popupRef is null: {popupRef is null}");
        if (popupRef == null)
        {
            Console.WriteLine("[DEBUG] popupRef is null. ImportTilePalette component may not be rendered yet.");
            return;
        }
        popupRef.Show();
        Console.WriteLine("[DEBUG] popupRef.Show() called.");
    }

    private void HandleInput(string input)
    {
        Definition.AddTilePaletteToArea(Definition.SelectedArea, input);
    }
}

